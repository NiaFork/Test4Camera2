package cho.nico.com.test;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.Configuration;
import android.graphics.ImageFormat;
import android.graphics.Matrix;
import android.graphics.Point;
import android.graphics.RectF;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.CaptureFailure;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.CaptureResult;
import android.hardware.camera2.TotalCaptureResult;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.Image;
import android.media.ImageReader;
import android.media.MediaRecorder;
import android.os.Environment;
import android.os.Handler;
import android.os.HandlerThread;
import android.support.annotation.NonNull;
import android.support.annotation.RequiresApi;
import android.text.TextUtils;
import android.util.Log;
import android.util.Size;
import android.util.SparseIntArray;
import android.view.Surface;
import android.view.TextureView;
import android.view.WindowManager;
import android.widget.Toast;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import static android.os.Build.VERSION_CODES.LOLLIPOP;

@RequiresApi(LOLLIPOP)
public class Camera2Utils1 {
    private String TAG = getClass().getSimpleName();

    private Context context;

    private AutoFitTextureView textureView;

    /**
     * Conversion from screen rotation to JPEG orientation.
     */
    private static final SparseIntArray ORIENTATIONS = new SparseIntArray();

    static {
        ORIENTATIONS.append(Surface.ROTATION_0, 90);
        ORIENTATIONS.append(Surface.ROTATION_90, 0);
        ORIENTATIONS.append(Surface.ROTATION_180, 270);
        ORIENTATIONS.append(Surface.ROTATION_270, 180);
    }

    private static final int SENSOR_ORIENTATION_DEFAULT_DEGREES = 90;
    private static final int SENSOR_ORIENTATION_INVERSE_DEGREES = 270;


    private static final SparseIntArray DEFAULT_ORIENTATIONS = new SparseIntArray();
    private static final SparseIntArray INVERSE_ORIENTATIONS = new SparseIntArray();

    static {
        DEFAULT_ORIENTATIONS.append(Surface.ROTATION_0, 90);
        DEFAULT_ORIENTATIONS.append(Surface.ROTATION_90, 0);
        DEFAULT_ORIENTATIONS.append(Surface.ROTATION_180, 270);
        DEFAULT_ORIENTATIONS.append(Surface.ROTATION_270, 180);
    }

    static {
        INVERSE_ORIENTATIONS.append(Surface.ROTATION_0, 270);
        INVERSE_ORIENTATIONS.append(Surface.ROTATION_90, 180);
        INVERSE_ORIENTATIONS.append(Surface.ROTATION_180, 90);
        INVERSE_ORIENTATIONS.append(Surface.ROTATION_270, 0);
    }

    public static final int MEDIA_QUALITY_MIDDLE = 16 * 100000;

//    private CaptureRequest.Builder requestBuilder;
    /**
     * {@link CaptureRequest.Builder} for the camera preview
     */
    private CaptureRequest.Builder mPreviewRequestBuilder;

    /**
     * {@link CaptureRequest} generated by {@link #mPreviewRequestBuilder}
     */
    private CaptureRequest mPreviewRequest;

    /**
     * A {@link CameraCaptureSession } for camera preview.
     */
    private CameraCaptureSession previewSession;

    private WindowManager windowManager;

    private CameraManager cameraManager;

    private Integer mSensorOrientation;

    private CameraDevice cameraDevice;

    private Handler backgroudHandler;

    private HandlerThread backgroudThread;

    private Size mPreviewSize;

    private ImageReader nv21Reader, jpegReader;


    private MediaRecorder mediaRecorder;

    private int rotation;

    private double ratio = 0.25d;

    /**
     * 相机标号
     */
    private String cameraId;

    /**
     * Whether the current camera device supports Flash or not.
     */
    private boolean flashSupported;

    private boolean autofocusSupported;

    /**
     * Camera state: Showing camera preview.
     */
    private static final int STATE_PREVIEW = 0;

    /**
     * Camera state: Waiting for the focus to be locked.
     */
    private static final int STATE_WAITING_LOCK = 1;

    /**
     * Camera state: Waiting for the exposure to be precapture state.
     */
    private static final int STATE_WAITING_PRECAPTURE = 2;

    /**
     * Camera state: Waiting for the exposure state to be something other than precapture.
     */
    private static final int STATE_WAITING_NON_PRECAPTURE = 3;

    /**
     * Camera state: Picture was taken.
     */
    private static final int STATE_PICTURE_TAKEN = 4;
    /**
     * The {@link android.util.Size} of video recording.
     */
    private Size videoSize;

    private int mState;

    private String basePath = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + "camera2" + File.separator;

    private boolean isRecording = false;

    private String currentVideoPath;

    private CameraResultCallback cameraResultCallback;

    /**
     * A {@link CameraCaptureSession.CaptureCallback} that handles events related to JPEG capture.
     */
    private CameraCaptureSession.CaptureCallback mPreviewCaptureCallback
            = new CameraCaptureSession.CaptureCallback() {

        private void process(CaptureResult result) {
            switch (mState) {
                case STATE_PREVIEW: {
//                    Log.e(TAG,"STATE_PREVIEW");
                    // We have nothing to do when the camera preview is working normally.
                    break;
                }
                case STATE_WAITING_LOCK: {
                    Log.e(TAG, "STATE_WAITING_LOCK");
                    Integer afState = result.get(CaptureResult.CONTROL_AF_STATE);
                    Log.e(TAG, "afState " + afState);
                    if (afState == null) {
                        captureStillPicture();
                    } else if (CaptureResult.CONTROL_AF_STATE_INACTIVE == afState) {
                        //CONTROL_AF_STATE_INACTIVE 前置 聚焦无效
                        runPrecaptureSequence();
                    } else if (CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED == afState ||
                            CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED == afState) {
                        // CONTROL_AE_STATE can be null on some devices
                        Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                        if (aeState == null ||
                                aeState == CaptureResult.CONTROL_AE_STATE_CONVERGED) {
                            mState = STATE_PICTURE_TAKEN;
                            captureStillPicture();
                        } else {
                            runPrecaptureSequence();
                        }
                    }
                    break;
                }
                case STATE_WAITING_PRECAPTURE: {
                    Log.e(TAG, "STATE_WAITING_PRECAPTURE");
                    // CONTROL_AE_STATE can be null on some devices
                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                    if (aeState == null ||
                            aeState == CaptureResult.CONTROL_AE_STATE_PRECAPTURE ||
                            aeState == CaptureRequest.CONTROL_AE_STATE_FLASH_REQUIRED) {
                        mState = STATE_WAITING_NON_PRECAPTURE;
                    }
                    break;
                }
                case STATE_WAITING_NON_PRECAPTURE: {
                    Log.e(TAG, "STATE_WAITING_NON_PRECAPTURE");
                    // CONTROL_AE_STATE can be null on some devices
                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                    if (aeState == null || aeState != CaptureResult.CONTROL_AE_STATE_PRECAPTURE) {
                        mState = STATE_PICTURE_TAKEN;
                        captureStillPicture();
                    }
                    break;
                }
            }
        }

        @Override
        public void onCaptureProgressed(@NonNull CameraCaptureSession session,
                                        @NonNull CaptureRequest request,
                                        @NonNull CaptureResult partialResult) {
            Log.e(TAG, "onCaptureProgressed");
            process(partialResult);
        }

        @Override
        public void onCaptureCompleted(@NonNull CameraCaptureSession session,
                                       @NonNull CaptureRequest request,
                                       @NonNull TotalCaptureResult result) {
//            Log.e(TAG, "onCaptureCompleted");
            process(result);
        }

        @Override
        public void onCaptureFailed(@NonNull CameraCaptureSession session, @NonNull CaptureRequest request, @NonNull CaptureFailure failure) {
            super.onCaptureFailed(session, request, failure);
            Log.e(TAG, "onCaptureFailed");
        }

    };


    private ImageReader.OnImageAvailableListener jpegImageLister = new ImageReader.OnImageAvailableListener() {
        @Override
        public void onImageAvailable(ImageReader reader) {

            File file = new File(basePath + System.currentTimeMillis() + ".jpg");
            Image image = reader.acquireLatestImage();
            new Thread(new ImageSaver(image, file)).start();
        }
    };

    private CameraDevice.StateCallback deviceCallback = new CameraDevice.StateCallback() {
        @Override
        public void onOpened(@NonNull CameraDevice camera) {

            cameraDevice = camera;
//            startPreview();
            try {
                createCameraPreviewSession();
            } catch (Exception e) {
                e.printStackTrace();
                camera.close();
                cameraDevice = null;
            }
        }

        @Override
        public void onDisconnected(@NonNull CameraDevice camera) {
            camera.close();
            cameraDevice = null;
        }

        @Override
        public void onError(@NonNull CameraDevice camera, int error) {
//            mCameraOpenCloseLock.release();
            camera.close();
            cameraDevice = null;

        }
    };

    private CameraCaptureSession.StateCallback previewStateCallback = new CameraCaptureSession.StateCallback() {
        @Override
        public void onConfigured(@NonNull CameraCaptureSession session) {
            // The camera is already closed
            if (null == cameraDevice) {
                return;
            }

            // When the session is ready, we start displaying the preview.
            previewSession = session;
            try {
                // Auto focus should be continuous for camera preview.
                setAutoFocus(mPreviewRequestBuilder);
                // Flash is automatically enabled when necessary.
                setAutoFlash(mPreviewRequestBuilder);
                // Finally, we start displaying the camera preview.
                mPreviewRequest = mPreviewRequestBuilder.build();
                previewSession.setRepeatingRequest(mPreviewRequest,
                        mPreviewCaptureCallback, backgroudHandler);
            } catch (CameraAccessException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void onConfigureFailed(@NonNull CameraCaptureSession session) {

        }
    };


    private CameraCaptureSession.CaptureCallback captureCallback = new CameraCaptureSession.CaptureCallback() {
        @Override
        public void onCaptureStarted(@NonNull CameraCaptureSession session, @NonNull CaptureRequest request, long timestamp, long frameNumber) {
            super.onCaptureStarted(session, request, timestamp, frameNumber);
        }

        @Override
        public void onCaptureCompleted(@NonNull CameraCaptureSession session, @NonNull CaptureRequest request, @NonNull TotalCaptureResult result) {
            super.onCaptureCompleted(session, request, result);
        }
    };


    /**
     * {@link TextureView.SurfaceTextureListener} handles several lifecycle events on a
     * {@link TextureView}.
     */
    private TextureView.SurfaceTextureListener mSurfaceTextureListener
            = new TextureView.SurfaceTextureListener() {

        @Override
        public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture,
                                              int width, int height) {
            openCamera(width, height);
        }

        @Override
        public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture,
                                                int width, int height) {
            configureTransform(width, height);
        }

        @Override
        public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
            return true;
        }

        @Override
        public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
        }

    };

    private static Camera2Utils1 camera2Utils;

    private Camera2Utils1() {

    }

    static {
        camera2Utils = new Camera2Utils1();
    }


    public static Camera2Utils1 getInstance() {
        return camera2Utils;
    }


    public void init(Context ctx, AutoFitTextureView textureview) throws CameraAccessException {

        this.context = ctx;
        this.textureView = textureview;
        startBackThread();
        windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        cameraManager = (CameraManager) context.getSystemService(Context.CAMERA_SERVICE);
        rotation = windowManager.getDefaultDisplay().getRotation();
        mediaRecorder = new MediaRecorder();
        String[] cameraidList = cameraManager.getCameraIdList();
        if (cameraidList.length == 1) {
            cameraId = cameraidList[0];
        } else if (cameraidList.length == 2) {
            cameraId = cameraidList[0];
        } else {
            return;
        }
        if (textureView.isAvailable()) {
            Log.e(TAG, "isAvailable");
            openCamera(textureView.getWidth(), textureView.getHeight());
        } else {
            textureView.setSurfaceTextureListener(mSurfaceTextureListener);
        }
    }


    /**
     * Creates a new {@link CameraCaptureSession} for camera preview.
     */
    private void createCameraPreviewSession() throws CameraAccessException {

        Log.e("thread", " createCameraPreviewSession  " + Thread.currentThread().getId());
        SurfaceTexture texture = textureView.getSurfaceTexture();
        assert texture != null;

        // We configure the size of default buffer to be the size of camera preview we want.
        texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());
        // This is the output Surface we need to start preview.
        Surface surface = new Surface(texture);
        // We set up a CaptureRequest.Builder with the output Surface.
        mPreviewRequestBuilder
                = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
        mPreviewRequestBuilder.addTarget(surface);

        // Here, we create a CameraCaptureSession for camera preview.
        cameraDevice.createCaptureSession(Arrays.asList(surface, jpegReader.getSurface()),
                previewStateCallback, null
        );

    }


    private void closeCurrentSession() throws CameraAccessException {
        if (previewSession == null) {
            return;
        }
        previewSession.abortCaptures();
        previewSession.stopRepeating();
    }

    private void updatePreview() {
        if (null == cameraDevice) {
            return;
        }
        try {
            setUpCaptureRequestBuilder(mPreviewRequestBuilder);
            HandlerThread thread = new HandlerThread("CameraPreview");
            thread.start();
            previewSession.setRepeatingRequest(mPreviewRequestBuilder.build(), null, backgroudHandler);

        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    private void setUpCaptureRequestBuilder(CaptureRequest.Builder requestBuilder) {
        requestBuilder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);
    }


    private void setupPreview() {
        nv21Reader = ImageReader.newInstance(mPreviewSize.getWidth(), mPreviewSize.getHeight(), ImageFormat.YUV_420_888, 10);
        nv21Reader.setOnImageAvailableListener(new ImageReader.OnImageAvailableListener() {
            @Override
            public void onImageAvailable(ImageReader reader) {

                Image img = reader.acquireLatestImage();
                img.close();
            }
        }, backgroudHandler);


    }


    private void startBackThread() {
        backgroudThread = new HandlerThread(getClass().getSimpleName());
        backgroudThread.start();
        backgroudHandler = new Handler(backgroudThread.getLooper());
    }

    @SuppressLint("MissingPermission")
    private void openCamera(int width, int height) {
        try {
            setUpCameraOutputs(width, height);
            configureTransform(width, height);
            Log.e(TAG, "cameraId " + cameraId + "   " + Thread.currentThread().getId());

            Log.e("thread", " openCamera  " + Thread.currentThread().getId());
            cameraManager.openCamera(cameraId, deviceCallback, backgroudHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

    }


    /**
     * Start the camera preview.
     */
    private void startPreview() {
        if (null == cameraDevice || !textureView.isAvailable() || null == mPreviewSize) {
            return;
        }
//        closePreviewSession();
        try {
            SurfaceTexture texture = textureView.getSurfaceTexture();
            assert texture != null;
            texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());
            mPreviewRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);

            setUpPreviewReader();//预览

            Surface previewSurface = new Surface(texture);
            Surface nv21Surface = nv21Reader.getSurface();

            mPreviewRequestBuilder.addTarget(previewSurface);
            mPreviewRequestBuilder.addTarget(nv21Surface);
            cameraDevice.createCaptureSession(Arrays.asList(previewSurface, nv21Surface),
                    new CameraCaptureSession.StateCallback() {

                        @Override
                        public void onConfigured(@NonNull CameraCaptureSession session) {
                            previewSession = session;
                            updatePreview();
                        }

                        @Override
                        public void onConfigureFailed(@NonNull CameraCaptureSession session) {
                        }
                    }, backgroudHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    /**
     * Configures the necessary {@link android.graphics.Matrix} transformation to `mTextureView`.
     * This method should not to be called until the camera preview size is determined in
     * openCamera, or until the size of `mTextureView` is fixed.
     *
     * @param viewWidth  The width of `mTextureView`
     * @param viewHeight The height of `mTextureView`
     */
    private void configureTransform(int viewWidth, int viewHeight) {
        if (null == textureView || null == mPreviewSize || null == context) {
            return;
        }

        final Matrix matrix = new Matrix();
        RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
        RectF bufferRect = new RectF(0, 0, mPreviewSize.getHeight(), mPreviewSize.getWidth());
        float centerX = viewRect.centerX();
        float centerY = viewRect.centerY();
        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());
            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);
            float scale = Math.max(
                    (float) viewHeight / mPreviewSize.getHeight(),
                    (float) viewWidth / mPreviewSize.getWidth());
            matrix.postScale(scale, scale, centerX, centerY);
            matrix.postRotate(90 * (rotation - 2), centerX, centerY);
        }

        textureView.post(new Runnable() {
            @Override
            public void run() {
                textureView.setTransform(matrix);
            }
        });
//        textureView.setTransform(matrix);
    }


    /**
     * In this sample, we choose a video size with 3x4 aspect ratio. Also, we don't use sizes
     * larger than 1080p, since MediaRecorder cannot handle such a high-resolution video.
     *
     * @param choices The list of available sizes
     * @return The video size
     */
    private Size chooseVideoSize(Size[] choices) {

        for (Size size : choices) {
            Log.e(TAG, "video size ==>" + size.toString());
            if (size.getWidth() == size.getHeight() * 4 / 3 && size.getWidth() <= 1080) {
                return size;
            }
        }
        Log.e(TAG, "Couldn't find any suitable video size");
        return choices[choices.length - 1];
    }

    /**
     * Given {@code choices} of {@code Size}s supported by a camera, chooses the smallest one whose
     * width and height are at least as large as the respective requested values, and whose aspect
     * ratio matches with the specified value.
     *
     * @param choices     The list of sizes that the camera supports for the intended output class
     * @param width       The minimum desired width
     * @param height      The minimum desired height
     * @param aspectRatio The aspect ratio
     * @return The optimal {@code Size}, or an arbitrary one if none were big enough
     */
    private Size chooseOptimalSize(Size[] choices, int width, int height, Size aspectRatio) {


        for (Size size : choices) {
//            Log.e(TAG, "video size ==>" + size.toString());
            if (size.getWidth() == size.getHeight() * 4 / 3 && size.getWidth() <= 1080) {
                return size;
            }
        }
        // Collect the supported resolutions that are at least as big as the preview Surface
        List<Size> bigEnough = new ArrayList<>();
        int w = aspectRatio.getWidth();
        int h = aspectRatio.getHeight();
        for (Size option : choices) {
            if (option.getHeight() == option.getWidth() * h / w &&
                    option.getWidth() >= width && option.getHeight() >= height) {
                bigEnough.add(option);
            }
        }

        // Pick the smallest of those, assuming we found any
        if (bigEnough.size() > 0) {
            return Collections.min(bigEnough, new CompareSizesByArea());
        } else {
            Log.e(TAG, "Couldn't find any suitable preview size");
            return choices[0];
        }
    }

    /**
     * switch the camera
     *
     * @throws CameraAccessException
     */
    public void flip() throws CameraAccessException {
        String[] cameraidList = cameraManager.getCameraIdList();
        if (cameraidList.length == 2) {
            cameraId = TextUtils.equals(cameraId, "0") ? "1" : "0";
        } else {
            return;
        }
        previewSession.abortCaptures();
        previewSession.stopRepeating();
        cameraDevice.close();
        openCamera(textureView.getWidth(), textureView.getHeight());
    }

    /**
     * set the camera capture-data callback
     * @param resultCallback
     */
    public void setResultCallback(CameraResultCallback resultCallback) {
        cameraResultCallback = resultCallback;
    }


    /**
     * Compares two {@code Size}s based on their areas.
     */
    static class CompareSizesByArea implements Comparator<Size> {

        @Override
        public int compare(Size lhs, Size rhs) {
            // We cast here to ensure the multiplications won't overflow
            return Long.signum((long) lhs.getWidth() * lhs.getHeight() -
                    (long) rhs.getWidth() * rhs.getHeight());
        }

    }


    /**
     * get the suitable size for screen
     *
     * @param choices
     * @param width
     * @param height
     * @return
     */
    private Size getPreviewSize(Size[] choices, int width, int height) {
        Size result = null;
        List<Size> bigEnough = new ArrayList<>();
        for (Size size : choices) {
//            Log.e(TAG, "supportsize = " + size.getWidth() + "*" + size.getHeight());
            if (size.getWidth() == size.getHeight() * width / height && size.getWidth() >= width && size.getHeight() >= height) {
                bigEnough.add(size);
            }
        }

        double viewratio = height * 1.00d / width;

        if (bigEnough.isEmpty()) {
            for (Size size : choices) {
                if (height > width) {
                    double current = Math.abs(size.getWidth() * 1.00d / size.getHeight() - viewratio);
                    if (size.getHeight() > 500 && current <= ratio) {
                        result = size;
                        ratio = current;
                    }
                } else {
                }


            }

        } else {

            result = Collections.max(bigEnough, new CompareSizesByArea());
        }

        Log.e(TAG, "result " + result.getWidth() + "*" + result.getHeight());

        return result;
    }


    /**
     * Sets up member variables related to camera.
     *
     * @param width  The width of available size for camera preview
     * @param height The height of available size for camera preview
     */
    @SuppressWarnings("SuspiciousNameCombination")
    private void setUpCameraOutputs(int width, int height) {
        try {
//            for (String cameraId : cameraManager.getCameraIdList()) {
            CameraCharacteristics characteristics
                    = cameraManager.getCameraCharacteristics(cameraId);

            // We don't use a front facing camera in this sample.
//                Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);
//                if (facing != null && facing == CameraCharacteristics.LENS_FACING_FRONT) {
//                    continue;
//                }

            StreamConfigurationMap map = characteristics.get(
                    CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
            if (map == null) {
                return;
            }

            // For still image captures, we use the largest available size.
            Size largest = Collections.max(
                    Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)),
                    new CompareSizesByArea());
            jpegReader = ImageReader.newInstance(largest.getWidth(), largest.getHeight(),
                    ImageFormat.JPEG, /*maxImages*/1);
            jpegReader.setOnImageAvailableListener(
                    jpegImageLister, backgroudHandler);

            // Find out if we need to swap dimension to get the preview size relative to sensor
            // coordinate.
//                int displayRotation = windowManager.getDefaultDisplay().getRotation();
            //noinspection ConstantConditions
            mSensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);
            boolean swappedDimensions = false;
            switch (rotation) {
                case Surface.ROTATION_0:
                case Surface.ROTATION_180:
                    if (mSensorOrientation == 90 || mSensorOrientation == 270) {
                        swappedDimensions = true;
                    }
                    break;
                case Surface.ROTATION_90:
                case Surface.ROTATION_270:
                    if (mSensorOrientation == 0 || mSensorOrientation == 180) {
                        swappedDimensions = true;
                    }
                    break;
                default:
                    Log.e(TAG, "Display rotation is invalid: " + rotation);
            }

            Point displaySize = new Point();
            windowManager.getDefaultDisplay().getSize(displaySize);
            int rotatedPreviewWidth = width;
            int rotatedPreviewHeight = height;
            int maxPreviewWidth = displaySize.x;
            int maxPreviewHeight = displaySize.y;

            if (swappedDimensions) {
                rotatedPreviewWidth = height;
                rotatedPreviewHeight = width;
                maxPreviewWidth = displaySize.y;
                maxPreviewHeight = displaySize.x;
            }

//                if (maxPreviewWidth > MAX_PREVIEW_WIDTH) {
//                    maxPreviewWidth = MAX_PREVIEW_WIDTH;
//                }
//
//                if (maxPreviewHeight > MAX_PREVIEW_HEIGHT) {
//                    maxPreviewHeight = MAX_PREVIEW_HEIGHT;
//                }

            // Danger, W.R.! Attempting to use too large a preview size could  exceed the camera
            // bus' bandwidth limitation, resulting in gorgeous previews but the storage of
            // garbage capture data.
            mPreviewSize = getPreviewSize(map.getOutputSizes(SurfaceTexture.class),
                    rotatedPreviewHeight, rotatedPreviewWidth/*, maxPreviewWidth,
                        maxPreviewHeight, largest*/);
            videoSize = mPreviewSize;

            Log.e(TAG, "previewSize  " + mPreviewSize);
            Log.e(TAG, "videoSize  " + videoSize);

            // We fit the aspect ratio of TextureView to the size of preview we picked.
            int orientation = context.getResources().getConfiguration().orientation;
            if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                textureView.setAspectRatio(
                        mPreviewSize.getWidth(), mPreviewSize.getHeight());
            } else {
                textureView.setAspectRatio(
                        mPreviewSize.getHeight(), mPreviewSize.getWidth());
            }

            // Check if the flash is supported.
            Boolean available = characteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE);


            flashSupported = available == null ? false : available;

            int[] afAvailableModes = characteristics.get(CameraCharacteristics.CONTROL_AF_AVAILABLE_MODES);
            autofocusSupported = afAvailableModes.length == 1 ? false : true;


        } catch (CameraAccessException e) {
            e.printStackTrace();
        } catch (NullPointerException e) {
            // Currently an NPE is thrown when the Camera2API is used but not supported on the
            // device this code runs.
//            ErrorDialog.newInstance(getString(R.string.camera_error))
//                    .show(getChildFragmentManager(), FRAGMENT_DIALOG);
            e.printStackTrace();
        }
    }


    /**
     * Initiate a still image capture.
     */
    public void takePicture() {
        File dir = new File(basePath);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        Log.e(TAG, "takePicture");
        lockFocus();
    }

    /**
     * Lock the focus as the first step for a still image capture.
     */
    private void lockFocus() {
        try {
            Log.e("thread", " takePicture  " + Thread.currentThread().getId());
            // This is how to tell the camera to lock focus.
            if (autofocusSupported) {
                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,
                        CameraMetadata.CONTROL_AF_TRIGGER_START);
            }
            // Tell #mCaptureCallback to wait for the lock.
            mState = STATE_WAITING_LOCK;
            previewSession.capture(mPreviewRequestBuilder.build(), mPreviewCaptureCallback,
                    backgroudHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    /**
     * Unlock the focus. This method should be called when still image capture sequence is
     * finished.
     */
    private void unlockFocus() {
        try {
            // Reset the auto-focus trigger
            if (autofocusSupported) {
                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,
                        CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);
            }
            setAutoFlash(mPreviewRequestBuilder);
            previewSession.capture(mPreviewRequestBuilder.build(), mPreviewCaptureCallback,
                    backgroudHandler);
            // After this, the camera will go back to the normal state of preview.
            mState = STATE_PREVIEW;
            previewSession.setRepeatingRequest(mPreviewRequest, mPreviewCaptureCallback,
                    backgroudHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }


    /**
     * start record video
     */
    public void startRecord() {
        Log.e("thread", " startRecord  " + Thread.currentThread().getId());
        if (null == cameraDevice || !textureView.isAvailable() || null == mPreviewSize) {
            return;
        }
        try {
            closePreviewSession();
            setUpMediaRecorder();
            setUpPreviewReader();
            SurfaceTexture texture = textureView.getSurfaceTexture();
            assert texture != null;
            texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());
            mPreviewRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_RECORD);
            List<Surface> surfaces = new ArrayList<>();

            // Set up Surface for the camera preview
            Surface previewSurface = new Surface(texture);
            surfaces.add(previewSurface);
            mPreviewRequestBuilder.addTarget(previewSurface);


            surfaces.add(nv21Reader.getSurface());
            mPreviewRequestBuilder.addTarget(nv21Reader.getSurface());

            // Set up Surface for the MediaRecorder
            Surface recorderSurface = mediaRecorder.getSurface();
            surfaces.add(recorderSurface);
            mPreviewRequestBuilder.addTarget(recorderSurface);

            // Start a capture session
            // Once the session starts, we can update the UI and start recording
            cameraDevice.createCaptureSession(surfaces, new CameraCaptureSession.StateCallback() {

                @Override
                public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
                    previewSession = cameraCaptureSession;
                    updatePreview();

                    mediaRecorder.start();
                    isRecording = true;
                }

                @Override
                public void onConfigureFailed(@NonNull CameraCaptureSession cameraCaptureSession) {
                    if (null != context) {
                        Toast.makeText(context, "Failed", Toast.LENGTH_SHORT).show();
                    }
                }
            }, backgroudHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }

    }

    /**
     * stop record
     *
     * @throws CameraAccessException
     * @ save true save to local
     * false delete the short video and restart preview
     */
    public void stopRecord(boolean save) {
        try {
            isRecording = false;
            closeCurrentSession();
            mediaRecorder.stop();
            mediaRecorder.reset();
            mediaRecorder.release();
        } catch (CameraAccessException e) {
            e.printStackTrace();
        } catch (IllegalStateException e) {
            e.printStackTrace();
        } finally {
            mediaRecorder = null;
        }
        closePreviewSession();
        try {
            cameraDevice.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (save) {
            cameraResultCallback.getMediaData(1, currentVideoPath);
        } else {
            File file = new File(currentVideoPath);
            if (file.exists()) {
                file.delete();
            }
            openCamera(textureView.getWidth(), textureView.getHeight());
        }
        currentVideoPath = null;

    }

    /**
     * Run the precapture sequence for capturing a still image. This method should be called when
     * we get a response in {@link #mPreviewCaptureCallback} from {@link #lockFocus()}.
     */
    private void runPrecaptureSequence() {
        try {
            // This is how to tell the camera to trigger.
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER,
                    CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER_START);
            // Tell #mCaptureCallback to wait for the precapture sequence to be set.
            mState = STATE_WAITING_PRECAPTURE;
            previewSession.capture(mPreviewRequestBuilder.build(), mPreviewCaptureCallback,
                    backgroudHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    /**
     * Capture a still picture. This method should be called when we get a response in
     * {@link #mPreviewCaptureCallback} from both {@link #lockFocus()}.
     */
    private void captureStillPicture() {
        try {
            if (null == context || null == cameraDevice) {
                return;
            }
            // This is the CaptureRequest.Builder that we use to take a picture.
            final CaptureRequest.Builder captureBuilder =
                    cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
            captureBuilder.addTarget(jpegReader.getSurface());

            // Use the same AE and AF modes as the preview.
            setAutoFocus(captureBuilder);
            setAutoFlash(captureBuilder);

            // Orientation
//            int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
            captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));

            CameraCaptureSession.CaptureCallback CaptureCallback
                    = new CameraCaptureSession.CaptureCallback() {

                @Override
                public void onCaptureCompleted(@NonNull CameraCaptureSession session,
                                               @NonNull CaptureRequest request,
                                               @NonNull TotalCaptureResult result) {
//                    showToast("Saved: " + mFile);
//                    Log.d(TAG, mFile.toString());
                    unlockFocus();
                }
            };
            previewSession.stopRepeating();
            previewSession.abortCaptures();
            previewSession.capture(captureBuilder.build(), CaptureCallback, null);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }


    private void setAutoFocus(CaptureRequest.Builder requestBuilder) {
        if (autofocusSupported) {
            requestBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                    CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
        }
    }

    private void setAutoFlash(CaptureRequest.Builder requestBuilder) {
        if (flashSupported) {
            requestBuilder.set(CaptureRequest.CONTROL_AE_MODE,
                    CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH);
        }
    }

    /**
     * Retrieves the JPEG orientation from the specified screen rotation.
     *
     * @param rotation The screen rotation.
     * @return The JPEG orientation (one of 0, 90, 270, and 360)
     */
    private int getOrientation(int rotation) {
        // Sensor orientation is 90 for most devices, or 270 for some devices (eg. Nexus 5X)
        // We have to take that into account and rotate JPEG properly.
        // For devices with orientation of 90, we simply return our mapping from ORIENTATIONS.
        // For devices with orientation of 270, we need to rotate the JPEG 180 degrees.
        return (ORIENTATIONS.get(rotation) + mSensorOrientation + 270) % 360;
    }

    /**
     * init mediarecorder
     */
    private void setUpMediaRecorder() {


        Log.e(TAG, "mediaRecorder==null " + (mediaRecorder == null));
        try {

            if (mediaRecorder == null) {
                mediaRecorder = new MediaRecorder();
            }
            mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
            mediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE);
            mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
            String currentVideoName = "video_" + System.currentTimeMillis();
            String videoFileName = currentVideoName + ".mp4";
//            String saveVideoPath = basePath + File.separator + "videodetect";

            File file = new File(basePath);
            if (!file.exists()) {
                file.mkdirs();
            }
            currentVideoPath = basePath + File.separator + videoFileName;

            File targetFile = new File(currentVideoPath);
            mediaRecorder.setOutputFile(targetFile.getPath());
            mediaRecorder.setVideoEncodingBitRate(MEDIA_QUALITY_MIDDLE);
            mediaRecorder.setVideoFrameRate(30);
            mediaRecorder.setVideoSize(videoSize.getWidth(), videoSize.getHeight());
            mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
            mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
            switch (mSensorOrientation) {
                case SENSOR_ORIENTATION_DEFAULT_DEGREES:
                    mediaRecorder.setOrientationHint(DEFAULT_ORIENTATIONS.get(rotation));
                    break;
                case SENSOR_ORIENTATION_INVERSE_DEGREES:
                    mediaRecorder.setOrientationHint(INVERSE_ORIENTATIONS.get(rotation));
                    break;
            }

            mediaRecorder.prepare();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void setUpPreviewReader() {
        nv21Reader = ImageReader.newInstance(mPreviewSize.getWidth(), mPreviewSize.getHeight(), ImageFormat.YUV_420_888, 10);
        nv21Reader.setOnImageAvailableListener(new ImageReader.OnImageAvailableListener() {
            @Override
            public void onImageAvailable(ImageReader reader) {
                Image image = reader.acquireLatestImage();
//                if (image == null) {
//                    return;
//                }
//
//                if (image.getPlanes() == null) {
//                    image.close();
//                    return;
//                }
//                if (isRecording) {
//                    if (nv21Callback != null) {
//                        nv21Callback.onPreviewCallback(getDataFromImage(image, COLOR_FormatNV21), image.getWidth(), image.getHeight());
//                    }
//                }
                if (image != null) {
                    image.close();
                }

            }
        }, backgroudHandler);


    }


    private void closePreviewSession() {
        try {
            Log.e(TAG, "closePreviewSession ");
            if (previewSession != null) {
                Log.e(TAG, "mPreviewSession != null ");
                previewSession.close();
                previewSession = null;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Saves a JPEG {@link Image} into the specified {@link File}.
     */
    private class ImageSaver implements Runnable {

        /**
         * The JPEG image
         */
        private final Image mImage;
        /**
         * The file we save the image into.
         */
        private final File mFile;

        ImageSaver(Image image, File file) {
            mImage = image;
            mFile = file;
        }

        @Override
        public void run() {
            ByteBuffer buffer = mImage.getPlanes()[0].getBuffer();
            byte[] bytes = new byte[buffer.remaining()];
            buffer.get(bytes);
            FileOutputStream output = null;
            try {
                output = new FileOutputStream(mFile);
                output.write(bytes);
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                mImage.close();
                if (null != output) {
                    try {
                        output.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

                cameraResultCallback.getMediaData(0, mFile.getAbsolutePath());
            }
        }
    }
}
